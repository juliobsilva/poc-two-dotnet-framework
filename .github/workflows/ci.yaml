name: Build and Deploy .NET Framework App to IIS

on:
  workflow_dispatch:
    inputs:
      project-name:
        description: 'Project name'
        required: true
      package-type:
        type: choice
        description: 'Package type'
        options:
          - artifact
          - nuget        
        required: true
        default: 'artifact'
      

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Get repository name
        id: get-repo-name
        run: |
          $repoName = $Env:GITHUB_REPOSITORY.Split('/')[1]
          "repoName=$repoName" | Out-File -Append -FilePath $env:GITHUB_OUTPUT

      - name: Install NuGet dependencies
        run: nuget restore ${{ inputs.project-name }}/${{ inputs.project-name }}.sln

      - name: Locate MSBuild
        id: locate-msbuild
        run: |
          $msbuildPath = (vswhere -latest -products * -requires Microsoft.Component.MSBuild -find 'MSBuild\**\Bin\MSBuild.exe')
          "msbuildPath=$msbuildPath" | Out-File -Append -FilePath $env:GITHUB_OUTPUT

      - name: Build solution
        run: |
          $msbuild = "${{ steps.locate-msbuild.outputs.msbuildPath }}"
          & "$msbuild" '${{ inputs.project-name }}/${{ inputs.project-name }}.sln' /p:Configuration=Release

      - name: Publish the application
        run: |
          $msbuild = "${{ steps.locate-msbuild.outputs.msbuildPath }}"
          & "$msbuild" '${{ inputs.project-name }}/${{ inputs.project-name }}.sln' /p:Configuration=Release /p:DeployOnBuild=true /p:PublishProfile=FolderProfile

      - name: Locate VSTest
        id: locate-vstest
        run: |
            $vstestpath = (vswhere -latest -products * -requires Microsoft.VisualStudio.PackageGroup.TestTools.Core -find Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe)
            "vstestpath=$vstestpath" | Out-File -Append -FilePath $env:GITHUB_OUTPUT

      - name: Run tests
        run: |
          $vstest = '${{ steps.locate-vstest.outputs.vstestpath }}'
          & "$vstest" **/*.Tests.dll --logger:trx
        continue-on-error: true

      - name: Publish artifact
        id: artifact-name
        if: ${{ inputs.package-type == 'artifact' }}
        uses: actions/upload-artifact@v4
        with:
          name: WebApplication
          path: 'WebApplication\obj\Release\Package\PackageTmp\*'
          retention-days: 7

      - name: Generate NuGet package
        if: ${{ inputs.package-type == 'nuget' }}
        run: |
          nuget pack ${{ inputs.project-name }}/${{ inputs.project-name }}/${{ inputs.project-name }}.csproj -Properties Configuration=Release -OutputDirectory ./nupkgs -Version 1.5.0

      - name: Publish to GitHub NuGet package
        if: ${{ inputs.package-type == 'nuget' }}
        run: |
          $packageDirectory = "D:\a\${{ steps.get-repo-name.outputs.repoName }}\${{ steps.get-repo-name.outputs.repoName }}\nupkgs\"
          dotnet nuget push $packageDirectory --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --api-key "${{ secrets.TOKEN_GENERIC }}"

  deploy:
    runs-on: windows-latest
    needs: build

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: artifact 

    - name: Deploy to IIS server
      env:
        IIS_SERVER: "${{vars.IIS_SERVER}}"
        IIS_USER: "${{vars.IIS_USER}}"
        IIS_PASSWORD: "${{vars.IIS_PASSWORD}}"
      run: |
        Install-Module -Name PSWindowsUpdate -Force -SkipPublisherCheck
        $password = ConvertTo-SecureString $env:IIS_PASSWORD -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential ($env:IIS_USER, $password)
        Set-Item -Path WSMan:\localhost\Client\TrustedHosts -Value "*" -Force
        Get-ChildItem -Path "$env:GITHUB_WORKSPACE"
        Write-Output "Current Directory: $env:GITHUB_WORKSPACE"
        
        # Cria uma sessão remota
        $session = New-PSSession -ComputerName $env:IIS_SERVER -Credential $credential

        # Copia os arquivos para o servidor remoto
        Copy-Item -Path "$env:GITHUB_WORKSPACE\artifact" -Destination "C:\WebApplication" -ToSession $session -Recurse

        # Executa os comandos remotamente
        Invoke-Command -ComputerName $env:IIS_SERVER -Credential $credential -ScriptBlock {
          param ($sourcePath, $destinationPath)
          
          # Garante que o diretório de destino existe
          if (!(Test-Path -Path $destinationPath)) {
              New-Item -ItemType Directory -Path $destinationPath -Force
          }

          # Copia os arquivos, sobrescrevendo apenas os necessários
          Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force

          # Importa o módulo do IIS e reinicia o app pool
          Import-Module WebAdministration
          Restart-WebAppPool -Name "DefaultAppPool"
        } -ArgumentList "C:\WebApplication", "C:\inetpub\wwwroot\"

